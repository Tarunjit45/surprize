// api/generate.js тАФ for Vercel
import fetch from "node-fetch";

export default async function handler(req, res) {
  if (req.method !== "POST") {
    return res.status(405).json({ error: "Method not allowed" });
  }

  try {
    const { kind = "poem", targetName = "Shrabani", senderName = "Tarunjit" } = req.body;
    const GEMINI_KEY = process.env.GEMINI_API_KEY;
    const MODEL = process.env.GEMINI_MODEL || "gemini-1.5-flash";

    // ЁЯкД Build prompt dynamically in Bengali
    let promptBase = "";
    if (kind === "shayari") {
      promptBase = `ржПржХржЯрж┐ рж░рзЛржорж╛ржирзНржЯрж┐ржХ ржмрж╛ржВрж▓рж╛ рж╢рж╛ржпрж╝рж╛рж░рж┐ рж▓рзЗржЦрзЛ ${targetName}-ржПрж░ ржЬржирзНржп, ржпрж╛ ржЖржмрзЗржЧржкрзВрж░рзНржг ржПржмржВ ржПржХржжржо ржЗржЙржирж┐ржХ рж╣ржмрзЗред рж╢рзЗрж╖ рж▓рж╛ржЗржирзЗ рж▓рж┐ржЦрзЛ тАФ "From ${senderName}".`;
    } else if (kind === "message") {
      promptBase = `${targetName}-ржПрж░ ржЬржирзНржп ржПржХржЯрж┐ ржнрж╛рж▓рзЛржмрж╛рж╕рж╛ржпрж╝ ржнрж░рж╛ ржмрж╛ржВрж▓рж╛ ржорзЗрж╕рзЗржЬ рж▓рзЗржЦрзЛред ржПржЯрж┐ ржЖржирзНрждрж░рж┐ржХ ржУ рж╣рзГржжржпрж╝рж╕рзНржкрж░рзНрж╢рзА рж╣рзЛржХред рж╕рж╛ржЗржи ржХрж░рзЛ тАФ ${senderName}.`;
    } else {
      promptBase = `ржПржХржЯрж┐ рж╕рзБржирзНржжрж░ рж░рзЛржорж╛ржирзНржЯрж┐ржХ ржмрж╛ржВрж▓рж╛ ржХржмрж┐рждрж╛ рж▓рзЗржЦрзЛ ${targetName}-ржПрж░ ржЬржирзНржпред ржПржЯрж┐ рж╕рзНржмржкрзНржиржоржпрж╝ ржУ ржорж┐рж╖рзНржЯрж┐ рж╣рзЛржХред рж╢рзЗрж╖ рж▓рж╛ржЗржирзЗ рж▓рж┐ржЦрзЛ тАФ "From ${senderName}".`;
    }

    // ЁЯМР Call Gemini API
    const url = `https://generativelanguage.googleapis.com/v1beta/models/${MODEL}:generateContent`;

    const payload = {
      contents: [{ role: "user", parts: [{ text: promptBase }] }],
      temperature: 0.8,
      maxOutputTokens: 512,
    };

    const resp = await fetch(url, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "x-goog-api-key": GEMINI_KEY,
      },
      body: JSON.stringify(payload),
    });

    if (!resp.ok) {
      console.error("Gemini API error:", resp.status);
      throw new Error("Gemini API failed");
    }

    const json = await resp.json();

    let message = "";
    if (json?.candidates?.length) {
      message =
        json.candidates[0]?.content?.parts?.[0]?.text ||
        json.candidates[0]?.output_text ||
        "ЁЯТФ";
    }

    if (!message || message === "ЁЯТФ") throw new Error("Empty message");

    return res.status(200).json({ message });
  } catch (err) {
    console.error("тЪая╕П Fallback mode activated:", err.message);

    const { kind, targetName, senderName } = req.body;

    // ЁЯТЦ Multiple fallback options
    const fallbackData = {
      shayari: [
        `ЁЯТ╗ ржХрзЛржбрзЗрж░ ржорждрзЛржЗ рждрзЛржорж╛рзЯ ржнрж╛рж▓рзЛржмрж╛рж╕рж╛,\nSyntax error ржирзЗржЗ, ржХрзЗржмрж▓ ржирж┐ржЦрзБржБржд ржнрж╛рж╖рж╛ред\nIf (heart == yours) {\n   return "Forever";\n}\nFrom ${senderName} тЭдя╕П`,
        `ЁЯза ржЖржорж╛рж░ ржХрзЛржбрзЗ ржпржд if-else ржЖржЫрзЗ, рж╕ржмржЗ ${targetName}-ржПрж░ ржЬржирзНржп truth return ржХрж░рзЗред ЁЯТШ\nтАФ From ${senderName}`,
        `тЪЩя╕П ${targetName}, рждрзБржорж┐ ржЖржорж╛рж░ ржХрзЛржбрзЗрж░ рж╕рзЗржЗ perfect algorithm,\nржпрж╛ execute рж╣рж▓рзЗ ржЖржорж╛рж░ ржкрзБрж░рзЛ world optimize рж╣рзЯрзЗ ржпрж╛рзЯред ЁЯШН\nтАФ From ${senderName}`,
        `ЁЯТ╛ ржпрждржЗ ржбрж┐ржмрж╛ржЧ ржХрж░рж┐, ржПржХржЯрж╛ржЗ error ржкрж╛ржЗ тАФ\nтАЬMissing ${targetName} in my life.тАЭ ЁЯТФ\nтАФ From ${senderName}`,
      ],
      message: [
        `ЁЯСйтАНЁЯТ╗ ${targetName}, рждрзБржорж┐ ржЖржорж╛рж░ ржХрзЛржбрзЗрж░ рж╕рзЗржЗ missing semicolon,\nржпрж╛ржХрзЗ ржЫрж╛рзЬрж╛ рж╕ржм ржХрж┐ржЫрзБ incomplete рж▓рж╛ржЧрзЗред\nрждрзЛржорж╛рзЯ ржкрзЗрж▓рзЗ ржкрзБрж░рзЛ ржХрзЛржбржЯрж╛ржЗ ржЪрж▓рзЗ perfect run-ржПред тЭдя╕П\nтАФ ${senderName}`,
        `ЁЯЦея╕П ${targetName}, рждрзБржорж┐ ржЖржорж╛рж░ CPU-ржПрж░ рж╕рзЗржЗ core,\nржпрж╛ ржЫрж╛ржбрж╝рж╛ ржХрзЛржирзЛ process complete рж╣ржпрж╝ ржирж╛ред ЁЯТУ\nтАФ ${senderName}`,
        `тМия╕П ржнрж╛рж▓рзЛржмрж╛рж╕рж╛ ржпржжрж┐ ржПржХржЯрж╛ function рж╣ржд, рждрж╛рж╣рж▓рзЗ ржЖржорж┐ рж▓рж┐ржЦрждрж╛ржо тАФ love(${targetName}); тЭдя╕П\nтАФ ${senderName}`,
        `ЁЯзб рждрзЛржорж╛рж░ рж╣рж╛рж╕рж┐ржЯрж╛ ржпрзЗржи console.log("happiness"); тАФ ржПржХржмрж╛рж░ ржжрзЗржЦрж▓рзЗржЗ ржкрзБрж░рзЛ рж╕рж┐рж╕рзНржЯрзЗржо fresh рж╣ржпрж╝рзЗ ржпрж╛ржпрж╝!\nтАФ ${senderName}`,
      ],
      poem: [
        `ЁЯза рж╕ржлржЯржУрзЯрзНржпрж╛рж░рзЗрж░ ржорждрзЛржЗ рждрзБржорж┐, ${targetName} тАФ\nрждрзЛржорж╛рж░ рж╣рж╛рж╕рж┐рждрзЗ ржЖржорж┐ crash рж╣рзЯрзЗ ржпрж╛ржЗред\nрждрзЛржорж╛рж░ ржЪрзЛржЦ ржжрзБржЯрзЛ debug ржХрж░рждрзЗ ржХрж░рждрзЗ,\nржЖржорж╛рж░ ржкрзБрж░рзЛ logic lost рж╣рзЯрзЗ ржпрж╛рзЯ!\nтАФ From ${senderName} ЁЯТЦ`,
        `ЁЯТ╗ ржЖржорж┐ ржХрзЛржб рж▓рж┐ржЦрж┐ рж░рж╛ржд ржЬрзЗржЧрзЗ,\nрждржмрзБ рждрзЛржорж╛рж░ ржирж╛ржоржЯрж╛ржЗ ржЖрж╕рзЗ ржкрзНрж░рждрж┐ржЯрж┐ loop-ржПред\nрждрзБржорж┐ ржЖржорж╛рж░ dream function,\nreturn love(${senderName}) тЭдя╕П\nтАФ ${senderName}`,
        `ЁЯМЩ рждрзЛржорж╛рж░ ржЪрзЛржЦрзЗ рждрж╛рж░рж╛рж░ ржЖрж▓рзЛ,\nрждрзЛржорж╛рж░ ржХржгрзНржарзЗ ржорж┐рж╖рзНржЯрж┐ bug-free ржХрзЛржбрзЗрж░ ржнрж╛рж▓рзЛржмрж╛рж╕рж╛ред\nржЖржорж┐ compile ржХрж░рж┐ рждрзЛржорж╛рж░ ржирж╛ржо, ${targetName}, ржкрзНрж░рждрж┐ржжрж┐ржи ржирждрзБржи version-ржПред ЁЯТХ\nтАФ From ${senderName}`,
        `тЪб рждрзЛржорж╛рж░ presence ржорж╛ржирзЗ high-speed network,\nрждрзЛржорж╛рж░ ржЕржирзБржкрж╕рзНржерж┐рждрж┐ ржорж╛ржирзЗ server downред\nрждрзБржорж┐ ржЫрж╛рзЬрж╛ рж╕ржм error, рж╢рзБржзрзБ рждрзБржорж┐ fix ржХрж░рзЛ ржЖржорж╛рж░ lifeред ЁЯТ╗тЭдя╕П\nтАФ From ${senderName}`,
      ],
    };

    // ЁЯО▓ Pick a random fallback message
    const responses = fallbackData[kind] || ["ЁЯТФ рж╕рж╛рж░рзНржнрж╛рж░ ржШрзБржорж╛ржЪрзНржЫрзЗ, ржХрж┐ржирзНрждрзБ ржЖржорж╛рж░ ржнрж╛рж▓рзЛржмрж╛рж╕рж╛ ржЬрзЗржЧрзЗ ржЖржЫрзЗ рждрзЛржорж╛рж░ ржЬржирзНржпред тАФ From Dev тЭдя╕П"];
    const randomResponse = responses[Math.floor(Math.random() * responses.length)];

    return res.status(200).json({ message: randomResponse });
  }
}
